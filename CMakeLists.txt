cmake_minimum_required(VERSION 3.23)
set(CMAKE_TOOLCHAIN_FILE "${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake" CACHE STRING "Vcpkg toolchain file")
project(test)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS"${CMAKE_CXX_FLAGS} /std:c++17")
set(nlohmann-json_IMPLICIT_CONVERSIONS OFF)

include(CTest)
find_package(Protobuf REQUIRED)

if(PROTOBUF_FOUND)
    message("protobuf found")
else()
    message(FATAL_ERROR "Cannot find Protobuf")
endif()

PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS test.proto)
message("PROTO_SRCS = ${PROTO_SRCS}")
message("PROTO_HDRS = ${PROTO_HDRS}")
add_executable(main main.cpp ${PROTO_SRCS} ${PROTO_HDRS})
add_executable(test_main test_main.cpp ${PROTO_SRCS} ${PROTO_HDRS})
target_include_directories(main PUBLIC ${PROTOBUF_INCLUDE_DIRS} ${CMAKE_CURRENT_BINARY_DIR})
target_link_libraries(main PUBLIC ${PROTOBUF_LIBRARIES})
target_include_directories(test_main PUBLIC ${PROTOBUF_INCLUDE_DIRS} ${CMAKE_CURRENT_BINARY_DIR})
target_link_libraries(test_main PUBLIC ${PROTOBUF_LIBRARIES})
find_package(Catch2 CONFIG REQUIRED)
target_link_libraries(test_main PRIVATE Catch2::Catch2 Catch2::Catch2WithMain)
find_package(Eigen3 CONFIG REQUIRED)
target_link_libraries(main PRIVATE Eigen3::Eigen)
target_link_libraries(test_main PRIVATE Eigen3::Eigen)
find_package(argparse CONFIG REQUIRED)
target_link_libraries(main PRIVATE argparse::argparse)
target_link_libraries(test_main PRIVATE argparse::argparse)
find_package(fmt CONFIG REQUIRED)
target_link_libraries(main PRIVATE fmt::fmt)
target_link_libraries(test_main PRIVATE fmt::fmt)
find_package(spdlog CONFIG REQUIRED)
target_link_libraries(main PRIVATE spdlog::spdlog spdlog::spdlog_header_only)
target_link_libraries(test_main PRIVATE spdlog::spdlog spdlog::spdlog_header_only)
find_package(nlohmann_json CONFIG REQUIRED)
target_link_libraries(main PRIVATE nlohmann_json::nlohmann_json)
target_link_libraries(test_main PRIVATE nlohmann_json::nlohmann_json)
find_package(asio CONFIG REQUIRED)
target_link_libraries(main PRIVATE asio asio::asio)
target_link_libraries(test_main PRIVATE asio asio::asio)

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
    find_package(PahoMqttCpp CONFIG REQUIRED)
    target_link_libraries(main PRIVATE PahoMqttCpp::paho-mqttpp3)
    target_link_libraries(test_main PRIVATE PahoMqttCpp::paho-mqttpp3)
else()
    find_package(PahoMqttCpp CONFIG REQUIRED)
    target_link_libraries(main PRIVATE PahoMqttCpp::paho-mqttpp3-static)
    target_link_libraries(test_main PRIVATE PahoMqttCpp::paho-mqttpp3-static)
endif()

enable_testing()
add_test(NAME test_main COMMAND test_main)
