name: c++ application

on:
  push:
    branches: ["main", "test_action"]
    tags:
      - v[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+.[0-9]+

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [macos-12,ubuntu-22.04,windows-2022]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
        #cmake安装
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.24.3
          ninjaVersion:  1.11.1

        
        #vcpkg下载所需包
      - name: run-vcpkg
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          # This one is not needed, as it is the default value anyway.
          # vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgJsonGlob: "vcpkg.json"
          
          
      - name: add pkg-config for macos
        if: matrix.os == 'macos-12'
        run:  brew install pkg-config

        #cmake编译
      - name: Run CMake+vcpkg
        run: |
          cmake . -B build -DEXECUTABLE_OUTPUT_PATH=target 
          cd build
          cmake --build . --config Release

      #测试
      - name: CTest
        run: |
          cd build
          ctest --verbose -C Release -T test --output-on-failure

      #添加windows下vc库依赖
      - name: add  windows vcdll
        if: matrix.os == 'windows-2022'
        run: |
          copy C:/Windows/system32/msvcp140*  ./build/target/Release
          copy C:/Windows/system32/vcruntime140*  ./build/target/Release
          copy C:/Windows/system32/ucrtbase*  ./build/target/Release

      - name: 7z
        uses: DuckSoft/create-7z-action@v1.0
        with:
          pathSource: ./build/target
          pathTarget: ${{ matrix.os }}.tar

      #上传打包文件
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-${{ matrix.os }}
          path: ${{ matrix.os }}.*

      - name: download-artifact
        if: github.ref_type=='tag'
        uses: actions/download-artifact@v3
        with:
          path: ./artifact/

      - name: note
        if: github.ref_type=='tag'
        shell: python
        run: |
          import os;f=open('releasenotes.md',"r");obj={i[0].strip():i[1:] for i in [i.split('-') for i in f.read().split('##')[1:]]};f.close()
          note=[obj[i] for i in obj if i=='${{github.ref_name}}'];note=[note[0] if note else ''][0]
          os.system("echo 'NOTE<<EOF' >> $GITHUB_ENV")
          tmp=[os.system("echo '{}' >> $GITHUB_ENV".format(n.strip())) for n in note ]
          os.system("echo 'EOF' >> $GITHUB_ENV")

      - name: Create Release
        if: github.ref_type=='tag'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{github.ref_name}}
          name: ${{github.ref_name}}
          body: ${{env.NOTE}}
          prerelease: false
          draft: false
          files: ./artifact/test-${{ matrix.os }}/*
